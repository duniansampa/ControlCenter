@inherits LayoutComponentBase
@using HyperAutomation.ControlRoom.Shared

<RadzenDialog />
<RadzenNotification />
<CascadingValue Value="this">
    <div class="@PageCss">
        <div class="@SidebarCss">
            <Sidebar @bind-SidebarMini="SidebarMini" />
        </div>
        <div class="@MainPanelCss">
            <BSNavbar IsExpand="true" HideLight="true">
                <div class="container-fluid">
                    <div class="adx-navbar-toggle-area">
                        <BSButton Class="btn-jus" Color="Color.Link" @onclick="ToggleSidebar">
                            <i class="fas fa-bars @ToggleRegularCss"></i>
                            <i class="fas fa-list-ul  @ToggleMiniCss"></i>
                        </BSButton>
                        <span class="adx-navbar-text">MEUS BOTS</span>
                    </div>
                    <MenuBar />
                </div>
            </BSNavbar>

            <div class="adx-content">
                @Body
            </div>
            <Footer IsFluid=@true />
        </div>
    </div>
</CascadingValue>

@code{
    [Inject] public IJSRuntime JS { get; set; }
    private bool SidebarMini = false;
    private bool DarkMode = false;

    private string SideBarColor = "blue";

    private string ToggleRegularCss => new CssBuilder()
                                        .AddClass("d-none", when: SidebarMini)
                                        .AddClass("d-inline-block", when: !SidebarMini)
                                        .Build();

    private string ToggleMiniCss => new CssBuilder()
                                    .AddClass("d-none", when: !SidebarMini)
                                    .AddClass("d-inline-block", when: SidebarMini)
                                    .Build();

    private string SidebarCss => new CssBuilder("adx-sidebar")
                                .AddClass($"adx-sidebar-{SideBarColor}", when: !string.IsNullOrWhiteSpace(SideBarColor))
                                .Build();

    private string PageCss => new CssBuilder("adx-page")
                            .AddClass("adx-sidebar-mini", when: SidebarMini)
                            .Build();

    private string MainPanelCss => new CssBuilder("adx-main-panel")
                                .AddClass("adx-light-mode", when: !DarkMode)
                                .Build();

    private void ToggleSidebar() => SidebarMini = !SidebarMini;

    private void ToggleMode() => DarkMode = !DarkMode;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("perfectScrollbarCreate", ".adx-main-panel");
    }
}